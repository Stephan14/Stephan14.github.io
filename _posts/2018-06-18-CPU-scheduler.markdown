---
layout:     post
title:      "CPU调度"
subtitle:   "CPU调度算法、调度时机、调度过程"
date:       2018-06-18 13:46:00
author:     "邹盛富"
header-img: "img/thomas-tixtaaz-119883-unsplash.jpg"
tags:
    - 操作系统
---

### CPU调度
#### 什么是CPU调度

按照一定的调度算法，从**就绪队列**中选择一个进程，把**CPU的控制权**交给被选中的进程。如果就绪
队列中没有就绪进程，系统会安排一个**空闲进程或者idle进程**上CPU执行。

#### CPU调度要解决的问题

- 进程调度的原则
- 进程调度的时机
- 进程调度的过程

### 调度的时机

- 进程正常终止或者因错误而终止
- 进程创建或者等待进程变成就绪态
- 进程从运行态变成阻塞态
- 进程从运行态变成就绪态

其实，当内核对中断、异常、系统调用处理后返回到用户态时会触发CPU调度

### 调度的过程

进程调度的过程其实就是进程切换的过程，所谓的进程切换主要包括两部分：
- 切换全局页目录以加载新的地址空间
- 切换内核栈和硬件上下文，具体步骤如下：
    - 保存旧进程的上下文环境（程序计数器、程序状态、其他寄存器）
    - 用新的转态和相关信息更新旧进程的PCB
    - 把旧进程移到相应的进程队列中
    - 将新进程的状态设置为运行态

总之，**切换过程包括对原来运行进程各种状态的保存和新的进程各种状态的恢复**

#### 调度的成本

##### 直接花销
- 保存以及恢复寄存器等
- 切换地址空间（相关指令比较昂贵）

##### 间接花销
- 高速缓存、缓冲区缓存、TLB失效

### 调度算法

#### 调度算法衡量指标
![](http://res.cloudinary.com/bytedance14/image/upload/v1529303476/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7_2018-06-18_%E4%B8%8B%E5%8D%882.29.56.png)

#### 设计调度算法考虑问题
- PCB中需要记录的与CPU调度有关数据
- 优先级以及进程队列的组织

    可以按照优先级来排队，如下图所示：
    ![](http://res.cloudinary.com/bytedance14/image/upload/v1529310918/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7_2018-06-18_%E4%B8%8B%E5%8D%884.33.59.png)

    也可以在进程的运行过程中动态的改变其优先级，如下图所示：
    ![](http://res.cloudinary.com/bytedance14/image/upload/v1529310927/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7_2018-06-18_%E4%B8%8B%E5%8D%884.34.21.png)
- 抢占式与非抢占式组织
- I/O密集与CPU密集型

    一般来说会让I/O密集进程尽早上CPU运行

- 时间片

    选择时间片时需要考虑进程切换的开销、对响应时间要求、CPU能力等、就绪进程个数等

### 批处理系统中调度算法

批处理是指用户将一批作业提交给操作系统后就不再干预，由操作系统控制它们自动运行。

#### 先来先服务（FCFS）

又称作先进先出（FIFO），是按照**进程就绪**的先后顺序使用CPU，属于**非抢占式**调度

##### 优点
- 公平
- 实现简单，维护队列即可

##### 缺点
- 长进程后面等待的短进程等待时间比较长

##### 例子
![](http://res.cloudinary.com/bytedance14/image/upload/v1529311835/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7_2018-06-18_%E4%B8%8B%E5%8D%884.49.35.png)

#### 短作业优先（SJF）

具有**最短完成时间**的进程优先执行，属于非抢占式。

如果将其改成抢占式，则为最短剩余时间优先算法（SRTN），当一个新的就绪进程比当前运行进程具有更短的完成时间时，系统抢占当前进程，选择新的就绪进程执行。

##### 优点
- 可以得到最短平均周转时间（前提是所有进程同时可运行）

##### 缺点
- 不公平，有很多短任务的时候可能会导致长任务不能运行

#### 最高相应比优先（HRRN）

调度时计算每个进程的相应比，选择所有进程中相应比最高的来执行。所谓的相应比为*周转时间/处理时间*，其推倒公式如下：
![](http://res.cloudinary.com/bytedance14/image/upload/v1529313001/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7_2018-06-18_%E4%B8%8B%E5%8D%885.07.47.png)
